// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  searchableName String   @default("")
  role           Role     @default(AUTHOR)
  isActive       Boolean  @default(true)
  posts          Post[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@index([searchableName, email])
  @@map("user")
}

enum Role {
  AUTHOR
  ADMIN
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  posts       Post[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Post {
  id             String        @id @default(uuid())
  title          String
  searchableTitle String        @default("")
  slug           String        @unique
  content        String
  published      Boolean       @default(false)
  featuredImage  String?
  author         User          @relation(fields: [authorId], references: [id])
  authorId       String
  category       Category      @relation(fields: [categoryId], references: [id])
  categoryId     String
  tags           TagsOnPosts[]
  comments       Comment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([searchableTitle, slug])
}

model Tag {
  id        String        @id @default(uuid())
  name      String        @unique
  slug      String        @unique
  posts     TagsOnPosts[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([name, slug])
}

model TagsOnPosts {
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())

  @@id([postId, tagId])
}

model Comment {
  id      String @id @default(uuid())
  content String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String

  // Champs pour les visiteurs
  visitorName  String
  visitorEmail String

  // Champ pour la modération (approuvé par défaut)
  isApproved Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
